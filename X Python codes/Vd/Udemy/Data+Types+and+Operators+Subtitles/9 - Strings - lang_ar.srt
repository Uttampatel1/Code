1
00:00:04,271 --> 00:00:08,775
كثيراً ما تنطوي البرمجة على ما هو
أكثر من مجرد أرقام وعمليات حسابية.

2
00:00:08,876 --> 00:00:12,513
قد تكون هناك حالات
تحتاج فيها إلى التعامل مع النصوص.

3
00:00:12,613 --> 00:00:16,817
للتعامل مع النصوص في Python
ستحتاج إلى استخدام string،

4
00:00:16,917 --> 00:00:20,721
وهي سلسة مرتبة لا تقبل التغيير من الحروف.

5
00:00:20,821 --> 00:00:24,291
سأحدثك أكثر
عن كونها مرتّبة لا تقبل التغيير لاحقاً.

6
00:00:24,391 --> 00:00:27,261
يمكنك إنشاء سلسلة "string"
باستخدام علامات التنصيص.

7
00:00:27,361 --> 00:00:30,697
علامات التنصيص الفردية أو المزدوجة
كلتاهما تفيان بالغرض بالقدر نفسه،

8
00:00:30,797 --> 00:00:34,301
إلا أن هناك
بعض الحالات الاستثنائية التي سنتناولها.

9
00:00:34,401 --> 00:00:41,475
في كل واحدة من هذه الحالات، طبعتُ السلسلة
"hello" وحصلتُ على النتيجة "hello".

10
00:00:41,575 --> 00:00:46,880
يمكننا إسناد سلسلة إلى متغيّر بالطريقة
ذاتها التي فعلنا بها ذلك مع الأرقام.

11
00:00:46,980 --> 00:00:53,220
يمكن للسلاسل أن تضم أي رمز،
حتى المسافات وعلامات الترقيم والأرقام.

12
00:00:53,320 --> 00:00:58,759
لكن ماذا نفعل إذا أردنا
كتابة علامة تنصيص داخل السلسلة؟

13
00:00:58,859 --> 00:01:01,995
بما أننا نستخدم علامات التنصيص
لتعريف السلاسل،

14
00:01:02,095 --> 00:01:04,398
فهذا يشكل مشكلة صغيرة.

15
00:01:04,498 --> 00:01:08,302
هنا، لا يعمل الكود بالطريقة التي نريد.

16
00:01:08,402 --> 00:01:12,472
تتيح Python حلّين لهذه المشكلة.

17
00:01:12,573 --> 00:01:19,112
الأولى هي وضع النص داخل علامات تنصيص
منفردة بدلاً من المزدوجة، هكذا.

18
00:01:19,213 --> 00:01:23,750
يمكنك استخدام أي النوعين
من علامات التنصيص لتعريف السلسلة،

19
00:01:23,851 --> 00:01:30,724
لكن أحياناً ستحتاج إلى تعريف سلسلة تشتمل
على علامات التنصيص الفردية والمزدوجة معاً.

20
00:01:30,824 --> 00:01:33,126
ماذا عسانا نفعل آنذاك؟ في تلك الحالة،

21
00:01:33,227 --> 00:01:36,930
يمكنك استخدام الشرطة المائلة للخلف
لإلغاء عمل علامة التنصيص.

22
00:01:37,030 --> 00:01:40,934
السلسلة هنا محدّدة
باستخدام علامات التنصيص الفردية.

23
00:01:41,034 --> 00:01:45,739
يسبق علامة التنصيص الفردية
التي داخل السلسلة النصية شرطة مائلة للخلف

24
00:01:45,839 --> 00:01:49,343
حتى تعرف Python
أنه يجب اعتبارها جزء من السلسلة

25
00:01:49,443 --> 00:01:53,080
بدلاً من علامة تنصيص التي تنهي السلسلة.

26
00:01:53,180 --> 00:01:55,516
بعد تعريف سلاسلنا،

27
00:01:55,616 --> 00:02:00,287
فإن هناك بعض العمليات المستخدمة
في التعامل مع النوعين int و float

28
00:02:00,387 --> 00:02:03,357
والتي يمكننا استخدامها أيضاً
في التعامل مع نوع السلسلة string.

29
00:02:03,457 --> 00:02:07,728
مثلاً، يمكننا استخدام
علامة الجمع "+" لدمج السلاسل،

30
00:02:07,828 --> 00:02:11,532
ويمكننا استخدام
إشارة الضرب "*" لتكرار السلسلة.

31
00:02:11,632 --> 00:02:14,568
دعونا نطلع على مثال على كل منهما.

32
00:02:14,668 --> 00:02:18,405
هنا يحوي المتغيّرين كلمتين.

33
00:02:18,505 --> 00:02:24,878
يمكننا استخدام إشارة الزائد "+" لدمج
السلسلتين في سلسلة جديدة وطباعة النتيجة.

34
00:02:24,978 --> 00:02:28,815
وهذا مختلف اختلافاً جوهرياً
عن الجمع أو الإضافة الرقمية.

35
00:02:28,916 --> 00:02:32,920
لكن لاحظ أن الاسمين متقاربان جداً،

36
00:02:33,020 --> 00:02:34,988
فلم يتم ترك مسافة بينهما.

37
00:02:35,088 --> 00:02:38,959
تتعامل لغة Python
بحرفية تامة عند التعامل مع السلاسل.

38
00:02:39,059 --> 00:02:43,030
علينا أن نضيف المسافات
وعلامات الترقيم بشكل صريح

39
00:02:43,130 --> 00:02:45,899
إذا أردنا لما نكتبه أن يبدو منطقياً.

40
00:02:45,999 --> 00:02:49,469
حصلنا هذه المرة على سلسلة نصية منطقية،

41
00:02:49,570 --> 00:02:53,874
حيث دمجنا الكلمتين
وجعلنا بينهما مسافة فاصلة.

42
00:02:53,974 --> 00:02:57,544
قلتُ سابقاً أن المسافات الفاصلة لا تؤثر

43
00:02:57,644 --> 00:03:01,849
بين الأقواس في التعليمات البرمجية
مثل أوامر print.

44
00:03:01,949 --> 00:03:05,986
أما هنا ونحن نتعامل مع السلاسل،
نرى أن المسافات تؤثر فعلاً

45
00:03:06,086 --> 00:03:09,156
فيما بين علامات التنصيص.

46
00:03:09,256 --> 00:03:12,893
لنجرّب عملية رياضية أخرى.

47
00:03:12,993 --> 00:03:16,730
يتضح أن بإمكاننا
استخدام إشارة الضرب كذلك.

48
00:03:16,830 --> 00:03:20,467
فيه تكرر السلسلة بعدد مرات العدد المضروب.

49
00:03:20,567 --> 00:03:22,870
وهو هنا خمس مرات.

50
00:03:22,970 --> 00:03:27,541
رغم أن الجمع والضرب لهما تطبيقات مختلفة
عند استخدامهما مع السلاسل،

51
00:03:27,641 --> 00:03:30,644
إلا أن الطرح والقسمة لا يمكن استخدامهما.

52
00:03:30,744 --> 00:03:37,251
هنا نتلقى رسالة خطأ مفاده أن string هو نوع
بيانات غير مدعوم من قبل عامل تشغيل القسمة.

53
00:03:37,351 --> 00:03:40,287
من الدوال المفيدة المضمنة في Python

54
00:03:40,387 --> 00:03:44,691
دالة len، وهي تخبرنا بطول السلسلة.

55
00:03:44,791 --> 00:03:48,128
وأعني بذلك عدد الأحرف داخل السلسلة.

56
00:03:48,228 --> 00:03:51,899
len شبيهة بـ print
من حيث أنها دالة مضمنة في Python

57
00:03:51,999 --> 00:03:56,837
تتلقى قيمة داخل قوسين لتقوم بتنفيذ إجراء.

58
00:03:56,937 --> 00:04:03,510
تختلف len عن print من حيث
أنها تُرجع قيمة يمكن تخزينها في متغيّر.

59
00:04:03,610 --> 00:04:08,148
في هذا المثال، تُنتج دالة len الرقم 7،

60
00:04:08,248 --> 00:04:11,685
والذي يتم تخزينه في المتغير
udacity_length.

61
00:04:11,785 --> 00:04:16,557
كلمة "مضمنة" تعني فحسب
أن Python توفر هذه الدوال لنا.

62
00:04:16,657 --> 00:04:19,793
فيما بعد سنتعلم كيف نُعرف دوالنا الخاصة.

